datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId                     String     @map("user_id")
  type                        String
  provider                 String
  providerAccountId String     @map("provider_account_id")
  refresh_token         String?
  access_token          String?
  expires_at               Int?
  token_type             String?
  scope                     String?
  id_token                 String?
  session_state          String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId        String
  expires      DateTime
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID               String  @unique
  userId                         String
  providerAccountId     String
  credentialPublicKey   String
  counter                      Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports                   String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}